<?php

namespace App\Http\Livewire\Calendar;

use App\Models\Container;
use App\Models\ContainerDelivery;
use Asantibanez\LivewireCalendar\LivewireCalendar;
use Illuminate\Routing\Route;
use Illuminate\Support\Collection;

class AppointmentCalendar extends LivewireCalendar
{
    public function events() : collection
    {
        $arrivals = Container::whereHas('shipment', function ($query){$query->whereNotNull('estimated_arrival');})->where('container_no', '!=', null)->get()
            ->map(function ($event) {
                return [
                    'id' => $event->shipment->id,
                    'title' => $event->container_no,
                    'description' => '🛳️ Arrives on '.$event->shipment->estimated_arrival?->format('d M y H:i'),
                    'date' => $event->shipment->estimated_arrival,
                    'url' => route('shipment', ['id' => $event->shipment->estimated_arrival])
                ];
            });
        $departures = Container::whereHas('shipment', function ($query){$query->whereNotNull('estimated_departure');})->get()
            ->map(function ($event) {
                return [
                    'id' => $event->shipment->id,
                    'title' => $event->container_no,
                    'description' => '👋 Departs on '.$event->shipment->estimated_departure?->format('d M y H:i'),
                    'date' => $event->shipment->estimated_departure,
//                    'url' => ShipmentResource::getUrl('view', ['record' => $event->shipment->id]),
                ];
            });
        $deliveries = ContainerDelivery::whereNotNull('arrival_estimated_delivery')->get()->map(function ($event) {
            return [
                'id' => $event->shipment->id,
                'title' => $event->container->container_no ?? 'pallet/package',
                'description' => '🚚 Delivers on '.$event->arrival_estimated_delivery?->format('d M y H:i'),
                'date' => $event->arrival_estimated_delivery,
//                'url' => ContainerDeliveryResource::getUrl('view', ['record' => $event->id]),
            ];
        });
        $clerances = Container::whereHas('shipment', function ($query){
            $query->whereNotNull('cleared_date');
        })->get()->map(function ($event) {
            return [
                'id' => $event->shipment->id,
                'title' => $event->container_no,
                'description' => '👍 Cleared on '.$event->shipment->cleared_date?->format('d M y H:i'),
                'date' => $event->shipment->cleared_date,
//                'url' => ShipmentResource::getUrl('view', ['record' => $event->shipment->id]),
            ];
        });

        $calendar = array_merge($arrivals->toArray(), $deliveries->toArray(), $departures->toArray(), $clerances->toArray());

        return collect($calendar);
    }

    public function onEventClick($eventId)
    {
        return redirect(route('shipment', ['id' => $eventId]));
    }

    public function goToPreviousMonth()
    {
        parent::goToPreviousMonth(); // TODO: Change the autogenerated stub
    }

    public function goToNextMonthMonth()
    {
        parent::goToNextMonthMonth(); // TODO: Change the autogenerated stub
    }

    public function goToCurrentMonthMonth()
    {
        parent::goToCurrentMonthMonth(); // TODO: Change the autogenerated stub
    }
}
